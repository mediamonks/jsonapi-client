{"id":"../../src/utils/type/types/isUint.ts","dependencies":[{"name":"/Users/nathanuphoff/Projects/~lab/jsonapi/tsconfig.json","includedInParent":true,"mtime":1563448860259},{"name":"/Users/nathanuphoff/Projects/~lab/jsonapi/examples/jsonapi-server/package.json","includedInParent":true,"mtime":1563442418980},{"name":"../lib/Type","loc":{"line":1,"column":21},"parent":"/Users/nathanuphoff/Projects/~lab/jsonapi/src/utils/type/types/isUint.ts","resolved":"/Users/nathanuphoff/Projects/~lab/jsonapi/src/utils/type/lib/Type.ts"},{"name":"../lib/And","loc":{"line":2,"column":20},"parent":"/Users/nathanuphoff/Projects/~lab/jsonapi/src/utils/type/types/isUint.ts","resolved":"/Users/nathanuphoff/Projects/~lab/jsonapi/src/utils/type/lib/And.ts"},{"name":"./isNumber","loc":{"line":3,"column":25},"parent":"/Users/nathanuphoff/Projects/~lab/jsonapi/src/utils/type/types/isUint.ts","resolved":"/Users/nathanuphoff/Projects/~lab/jsonapi/src/utils/type/types/isNumber.ts"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isUint = void 0;\n\nvar _Type = require(\"../lib/Type\");\n\nvar _And = require(\"../lib/And\");\n\nvar _isNumber = require(\"./isNumber\");\n\nvar isUint = new _And.And([_isNumber.isNumber, new _Type.Type('a positive integer', function (value) {\n  return Math.floor(value) === value && value >= 0 && value !== Infinity;\n})]);\nexports.isUint = isUint;"},"sourceMaps":{"js":{"mappings":[{"source":"../../src/utils/type/types/isUint.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":8,"column":0}},{"source":"../../src/utils/type/types/isUint.ts","name":null,"original":{"line":2,"column":0},"generated":{"line":10,"column":0}},{"source":"../../src/utils/type/types/isUint.ts","name":null,"original":{"line":3,"column":0},"generated":{"line":12,"column":0}},{"source":"../../src/utils/type/types/isUint.ts","name":null,"original":{"line":5,"column":7},"generated":{"line":14,"column":0}},{"source":"../../src/utils/type/types/isUint.ts","name":null,"original":{"line":5,"column":13},"generated":{"line":14,"column":4}},{"source":"../../src/utils/type/types/isUint.ts","name":null,"original":{"line":5,"column":19},"generated":{"line":14,"column":10}},{"source":"../../src/utils/type/types/isUint.ts","name":null,"original":{"line":5,"column":22},"generated":{"line":14,"column":13}},{"source":"../../src/utils/type/types/isUint.ts","name":null,"original":{"line":5,"column":26},"generated":{"line":14,"column":17}},{"source":"../../src/utils/type/types/isUint.ts","name":null,"original":{"line":5,"column":22},"generated":{"line":14,"column":25}},{"source":"../../src/utils/type/types/isUint.ts","name":null,"original":{"line":5,"column":30},"generated":{"line":14,"column":26}},{"source":"../../src/utils/type/types/isUint.ts","name":null,"original":{"line":6,"column":2},"generated":{"line":14,"column":27}},{"source":"../../src/utils/type/types/isUint.ts","name":null,"original":{"line":5,"column":30},"generated":{"line":14,"column":45}},{"source":"../../src/utils/type/types/isUint.ts","name":null,"original":{"line":7,"column":2},"generated":{"line":14,"column":47}},{"source":"../../src/utils/type/types/isUint.ts","name":null,"original":{"line":7,"column":6},"generated":{"line":14,"column":51}},{"source":"../../src/utils/type/types/isUint.ts","name":null,"original":{"line":7,"column":2},"generated":{"line":14,"column":61}},{"source":"../../src/utils/type/types/isUint.ts","name":null,"original":{"line":8,"column":4},"generated":{"line":14,"column":62}},{"source":"../../src/utils/type/types/isUint.ts","name":null,"original":{"line":7,"column":2},"generated":{"line":14,"column":82}},{"source":"../../src/utils/type/types/isUint.ts","name":null,"original":{"line":9,"column":4},"generated":{"line":14,"column":84}},{"source":"../../src/utils/type/types/isUint.ts","name":null,"original":{"line":9,"column":5},"generated":{"line":14,"column":94}},{"source":"../../src/utils/type/types/isUint.ts","name":null,"original":{"line":9,"column":4},"generated":{"line":14,"column":99}},{"source":"../../src/utils/type/types/isUint.ts","name":null,"original":{"line":9,"column":4},"generated":{"line":15,"column":0}},{"source":"../../src/utils/type/types/isUint.ts","name":null,"original":{"line":10,"column":6},"generated":{"line":15,"column":9}},{"source":"../../src/utils/type/types/isUint.ts","name":null,"original":{"line":10,"column":10},"generated":{"line":15,"column":13}},{"source":"../../src/utils/type/types/isUint.ts","name":null,"original":{"line":10,"column":11},"generated":{"line":15,"column":14}},{"source":"../../src/utils/type/types/isUint.ts","name":null,"original":{"line":10,"column":6},"generated":{"line":15,"column":19}},{"source":"../../src/utils/type/types/isUint.ts","name":null,"original":{"line":10,"column":17},"generated":{"line":15,"column":20}},{"source":"../../src/utils/type/types/isUint.ts","name":null,"original":{"line":10,"column":6},"generated":{"line":15,"column":25}},{"source":"../../src/utils/type/types/isUint.ts","name":null,"original":{"line":10,"column":28},"generated":{"line":15,"column":31}},{"source":"../../src/utils/type/types/isUint.ts","name":null,"original":{"line":10,"column":6},"generated":{"line":15,"column":36}},{"source":"../../src/utils/type/types/isUint.ts","name":null,"original":{"line":10,"column":37},"generated":{"line":15,"column":40}},{"source":"../../src/utils/type/types/isUint.ts","name":null,"original":{"line":10,"column":42},"generated":{"line":15,"column":45}},{"source":"../../src/utils/type/types/isUint.ts","name":null,"original":{"line":10,"column":46},"generated":{"line":15,"column":49}},{"source":"../../src/utils/type/types/isUint.ts","name":null,"original":{"line":10,"column":6},"generated":{"line":15,"column":50}},{"source":"../../src/utils/type/types/isUint.ts","name":null,"original":{"line":10,"column":51},"generated":{"line":15,"column":54}},{"source":"../../src/utils/type/types/isUint.ts","name":null,"original":{"line":10,"column":56},"generated":{"line":15,"column":59}},{"source":"../../src/utils/type/types/isUint.ts","name":null,"original":{"line":10,"column":61},"generated":{"line":15,"column":64}},{"source":"../../src/utils/type/types/isUint.ts","name":null,"original":{"line":9,"column":4},"generated":{"line":15,"column":72}},{"source":"../../src/utils/type/types/isUint.ts","name":null,"original":{"line":9,"column":4},"generated":{"line":16,"column":0}},{"source":"../../src/utils/type/types/isUint.ts","name":null,"original":{"line":7,"column":2},"generated":{"line":16,"column":1}},{"source":"../../src/utils/type/types/isUint.ts","name":null,"original":{"line":5,"column":30},"generated":{"line":16,"column":2}},{"source":"../../src/utils/type/types/isUint.ts","name":null,"original":{"line":5,"column":22},"generated":{"line":16,"column":3}},{"source":"../../src/utils/type/types/isUint.ts","name":null,"original":{"line":5,"column":7},"generated":{"line":16,"column":4}}],"sources":{"../../src/utils/type/types/isUint.ts":"import { Type } from '../lib/Type'\nimport { And } from '../lib/And'\nimport { isNumber } from './isNumber'\n\nexport const isUint = new And([\n  isNumber,\n  new Type(\n    'a positive integer',\n    (value: any): value is number =>\n      Math.floor(value) === value && value >= 0 && value !== Infinity,\n  ),\n])\n"},"lineCount":null}},"error":null,"hash":"42e406484000c0086e70d2f134d62563","cacheData":{"env":{}}}