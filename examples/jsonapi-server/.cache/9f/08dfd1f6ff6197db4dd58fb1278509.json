{"id":"../../src/utils/type/util/wrapPropertyKey.ts","dependencies":[{"name":"/Users/nathanuphoff/Projects/~lab/jsonapi/tsconfig.json","includedInParent":true,"mtime":1563448860259},{"name":"/Users/nathanuphoff/Projects/~lab/jsonapi/examples/jsonapi-server/package.json","includedInParent":true,"mtime":1563442418980}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.wrapPropertyKey = void 0;\n\nvar wrapPropertyKey = function wrapPropertyKey(key) {\n  return typeof key === 'string' ? \"['\".concat(key, \"']\") : \"[\".concat(String(key), \"]\");\n};\n\nexports.wrapPropertyKey = wrapPropertyKey;"},"sourceMaps":{"js":{"mappings":[{"source":"../../src/utils/type/util/wrapPropertyKey.ts","name":null,"original":{"line":1,"column":7},"generated":{"line":8,"column":0}},{"source":"../../src/utils/type/util/wrapPropertyKey.ts","name":null,"original":{"line":1,"column":13},"generated":{"line":8,"column":4}},{"source":"../../src/utils/type/util/wrapPropertyKey.ts","name":null,"original":{"line":1,"column":28},"generated":{"line":8,"column":19}},{"source":"../../src/utils/type/util/wrapPropertyKey.ts","name":null,"original":{"line":1,"column":31},"generated":{"line":8,"column":22}},{"source":"../../src/utils/type/util/wrapPropertyKey.ts","name":null,"original":{"line":1,"column":13},"generated":{"line":8,"column":31}},{"source":"../../src/utils/type/util/wrapPropertyKey.ts","name":null,"original":{"line":1,"column":31},"generated":{"line":8,"column":46}},{"source":"../../src/utils/type/util/wrapPropertyKey.ts","name":null,"original":{"line":1,"column":32},"generated":{"line":8,"column":47}},{"source":"../../src/utils/type/util/wrapPropertyKey.ts","name":null,"original":{"line":1,"column":31},"generated":{"line":8,"column":50}},{"source":"../../src/utils/type/util/wrapPropertyKey.ts","name":null,"original":{"line":1,"column":31},"generated":{"line":9,"column":0}},{"source":"../../src/utils/type/util/wrapPropertyKey.ts","name":null,"original":{"line":2,"column":2},"generated":{"line":9,"column":9}},{"source":"../../src/utils/type/util/wrapPropertyKey.ts","name":null,"original":{"line":2,"column":9},"generated":{"line":9,"column":16}},{"source":"../../src/utils/type/util/wrapPropertyKey.ts","name":null,"original":{"line":2,"column":2},"generated":{"line":9,"column":19}},{"source":"../../src/utils/type/util/wrapPropertyKey.ts","name":null,"original":{"line":2,"column":17},"generated":{"line":9,"column":24}},{"source":"../../src/utils/type/util/wrapPropertyKey.ts","name":null,"original":{"line":2,"column":2},"generated":{"line":9,"column":32}},{"source":"../../src/utils/type/util/wrapPropertyKey.ts","name":null,"original":{"line":2,"column":33},"generated":{"line":9,"column":47}},{"source":"../../src/utils/type/util/wrapPropertyKey.ts","name":null,"original":{"line":2,"column":2},"generated":{"line":9,"column":50}},{"source":"../../src/utils/type/util/wrapPropertyKey.ts","name":null,"original":{"line":2,"column":47},"generated":{"line":9,"column":71}},{"source":"../../src/utils/type/util/wrapPropertyKey.ts","name":null,"original":{"line":2,"column":53},"generated":{"line":9,"column":77}},{"source":"../../src/utils/type/util/wrapPropertyKey.ts","name":null,"original":{"line":2,"column":54},"generated":{"line":9,"column":78}},{"source":"../../src/utils/type/util/wrapPropertyKey.ts","name":null,"original":{"line":2,"column":53},"generated":{"line":9,"column":81}},{"source":"../../src/utils/type/util/wrapPropertyKey.ts","name":null,"original":{"line":2,"column":2},"generated":{"line":9,"column":82}},{"source":"../../src/utils/type/util/wrapPropertyKey.ts","name":null,"original":{"line":1,"column":31},"generated":{"line":9,"column":88}},{"source":"../../src/utils/type/util/wrapPropertyKey.ts","name":null,"original":{"line":1,"column":31},"generated":{"line":10,"column":0}},{"source":"../../src/utils/type/util/wrapPropertyKey.ts","name":null,"original":{"line":1,"column":7},"generated":{"line":10,"column":1}}],"sources":{"../../src/utils/type/util/wrapPropertyKey.ts":"export const wrapPropertyKey = (key: PropertyKey) =>\n  typeof key === 'string' ? `['${key}']` : `[${String(key)}]`\n"},"lineCount":null}},"error":null,"hash":"d3e46cfe17b4824370e889b4159df50b","cacheData":{"env":{}}}