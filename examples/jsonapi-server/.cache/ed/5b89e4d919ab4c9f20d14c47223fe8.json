{"id":"../../src/utils/type/generics/either.ts","dependencies":[{"name":"/Users/nathanuphoff/Projects/~lab/jsonapi/tsconfig.json","includedInParent":true,"mtime":1563448860259},{"name":"/Users/nathanuphoff/Projects/~lab/jsonapi/examples/jsonapi-server/package.json","includedInParent":true,"mtime":1563442418980},{"name":"./literal","loc":{"line":1,"column":24},"parent":"/Users/nathanuphoff/Projects/~lab/jsonapi/src/utils/type/generics/either.ts","resolved":"/Users/nathanuphoff/Projects/~lab/jsonapi/src/utils/type/generics/literal.ts"},{"name":"../index","loc":{"line":2,"column":19},"parent":"/Users/nathanuphoff/Projects/~lab/jsonapi/src/utils/type/generics/either.ts","resolved":"/Users/nathanuphoff/Projects/~lab/jsonapi/src/utils/type/index.ts"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.either = void 0;\n\nvar _literal = require(\"./literal\");\n\nvar _index = require(\"../index\");\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance\"); }\n\nfunction _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }\n\nvar either = function either() {\n  for (var _len = arguments.length, literalValues = new Array(_len), _key = 0; _key < _len; _key++) {\n    literalValues[_key] = arguments[_key];\n  }\n\n  return _index.or.apply(void 0, _toConsumableArray(literalValues.map(_literal.literal)));\n};\n\nexports.either = either;"},"sourceMaps":{"js":{"mappings":[{"source":"../../src/utils/type/generics/either.ts","name":null,"original":{"line":2,"column":0},"generated":{"line":8,"column":0}},{"source":"../../src/utils/type/generics/either.ts","name":null,"original":{"line":3,"column":0},"generated":{"line":10,"column":0}},{"source":"../../src/utils/type/generics/either.ts","name":null,"original":{"line":5,"column":7},"generated":{"line":20,"column":0}},{"source":"../../src/utils/type/generics/either.ts","name":null,"original":{"line":5,"column":13},"generated":{"line":20,"column":4}},{"source":"../../src/utils/type/generics/either.ts","name":null,"original":{"line":5,"column":19},"generated":{"line":20,"column":10}},{"source":"../../src/utils/type/generics/either.ts","name":null,"original":{"line":5,"column":22},"generated":{"line":20,"column":13}},{"source":"../../src/utils/type/generics/either.ts","name":null,"original":{"line":5,"column":13},"generated":{"line":20,"column":22}},{"source":"../../src/utils/type/generics/either.ts","name":null,"original":{"line":5,"column":22},"generated":{"line":20,"column":28}},{"source":"../../src/utils/type/generics/either.ts","name":null,"original":{"line":7,"column":13},"generated":{"line":20,"column":31}},{"source":"../../src/utils/type/generics/either.ts","name":null,"original":{"line":7,"column":13},"generated":{"line":21,"column":0}},{"source":"../../src/utils/type/generics/either.ts","name":null,"original":{"line":6,"column":5},"generated":{"line":21,"column":36}},{"source":"../../src/utils/type/generics/either.ts","name":null,"original":{"line":7,"column":13},"generated":{"line":21,"column":49}},{"source":"../../src/utils/type/generics/either.ts","name":null,"original":{"line":6,"column":5},"generated":{"line":22,"column":0}},{"source":"../../src/utils/type/generics/either.ts","name":null,"original":{"line":6,"column":5},"generated":{"line":22,"column":4}},{"source":"../../src/utils/type/generics/either.ts","name":null,"original":{"line":7,"column":13},"generated":{"line":22,"column":17}},{"source":"../../src/utils/type/generics/either.ts","name":null,"original":{"line":7,"column":13},"generated":{"line":23,"column":0}},{"source":"../../src/utils/type/generics/either.ts","name":null,"original":{"line":8,"column":2},"generated":{"line":25,"column":0}},{"source":"../../src/utils/type/generics/either.ts","name":null,"original":{"line":8,"column":9},"generated":{"line":25,"column":9}},{"source":"../../src/utils/type/generics/either.ts","name":null,"original":{"line":8,"column":15},"generated":{"line":25,"column":52}},{"source":"../../src/utils/type/generics/either.ts","name":null,"original":{"line":8,"column":28},"generated":{"line":25,"column":65}},{"source":"../../src/utils/type/generics/either.ts","name":null,"original":{"line":8,"column":29},"generated":{"line":25,"column":66}},{"source":"../../src/utils/type/generics/either.ts","name":null,"original":{"line":8,"column":15},"generated":{"line":25,"column":69}},{"source":"../../src/utils/type/generics/either.ts","name":null,"original":{"line":8,"column":33},"generated":{"line":25,"column":70}},{"source":"../../src/utils/type/generics/either.ts","name":null,"original":{"line":8,"column":15},"generated":{"line":25,"column":86}},{"source":"../../src/utils/type/generics/either.ts","name":null,"original":{"line":8,"column":9},"generated":{"line":25,"column":87}},{"source":"../../src/utils/type/generics/either.ts","name":null,"original":{"line":8,"column":2},"generated":{"line":25,"column":89}},{"source":"../../src/utils/type/generics/either.ts","name":null,"original":{"line":9,"column":1},"generated":{"line":26,"column":0}},{"source":"../../src/utils/type/generics/either.ts","name":null,"original":{"line":5,"column":7},"generated":{"line":26,"column":1}}],"sources":{"../../src/utils/type/generics/either.ts":"import { Type } from '../lib/Type'\nimport { literal } from './literal'\nimport { or } from '../index'\n\nexport const either = <T extends string | number | boolean | null | undefined>(\n  ...literalValues: Array<T>\n): Type<T> => {\n  return or(...literalValues.map(literal))\n}\n"},"lineCount":null}},"error":null,"hash":"b8c1c1aa7ff046e04f8ccb3f0e8f8534","cacheData":{"env":{}}}